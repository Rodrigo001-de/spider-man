// Container-devices
$container-xl: 1440px;
$container-l: 1140px;
$container-m: 960px;
$container-s: 540px;

// Mixin of media-queries
@mixin responsive($device) {
  @if $device == xl {
     // Para resoluções superiores a 1440px
    @media screen and (min-width: $container-xl) {
      @content;
    }
  } @else if $device == l {
    // Para resoluções entre 1140px e 1440px
    @media screen and (max-width: $container-xl) and (min-width: $container-l) {
      @content;
    }
  } @else if $device == m {
     // Para resoluções entre 960px e 1440px
    @media screen and (max-width: $container-l) and (min-width: $container-s) {
      @content;
    }
  } @else if $device == s {
    // Para resoluções inferiores a 960px
    @media screen and (max-width: $container-m) {
      @content;
    }
  } @else if $device == xs {
    // Para resoluções inferiores a 540px
    @media screen and (max-width: $container-s) {
      @content;
    }
  }
}

.initial {
  overflow: hidden;

  @include responsive(m){
    overflow: none;
  }
}

.container {
  max-width:  $container-xl;
  margin: 0 auto;

  padding: 36px 16px;

  // todos os elementos que passarem do max-width(1440px) é para esconder
  overflow: none;

  height: 85vh;

  display: flex;
  // o padrão do display flex é row, eu estou colocando isso porque quando for
  // aplicar responsividade para o mobile eu vou colocar flex-direction: column
  flex-direction: row;
  // horizontal
  align-items: center;
  // vertical
  // justify-content: center;

  @include responsive(s){
    flex-direction: column;
    align-items: flex-start;

    padding-top: 144px;

    height: auto;
  }
}

.container-item-1 {
  max-width: 576px;

  @include responsive(s){
    max-width: 960px;
    order: 2;
  }

  display: flex;
  flex-direction: column;
  justify-content: center;
  // nesse caso o align-items muda de direção, porque eu coloquei o flex-direction
  // como column
  align-items: flex-start;
}

.container-item-2{
  flex-grow: 5;
}

.flex {
  display: flex;
}

// essa classe é para forçar que o tamanho do elemento das divs do ps e da marvel
// esteja do tamanho automatico do svg
.w-auto {
  width: auto;
}

.align-items-center {
  align-items: center;
}

.spiderman {
  width: 140%;
  transform: translate3d(-150px,-50px,0);
  z-index: -1;

  @include responsive(xl){
    transform: translate3d(-190px,-20px,0);
    width: 150%;
  }

  @include responsive(s){
    transform: translate3d(0,-20px,0);
    width: 100%;
  }
}

.btn {
  display: inline-block;
  background: linear-gradient(267.72deg, $red-light 0.88%, $red 100%);
  border-radius: 3px;

  padding: 12px 32px;
  text-transform: uppercase;

  transform: skewX(-10deg);
  transition: .7s ease;
  
  position: relative;

  &::after{
    content: '';
    position: absolute;
    display: block;
    top: -2px;
    left: -2px;

    border-radius: 3px;
    opacity: 0;

    width: 20%;
    height: 70%;
    z-index: -1;

    border-top: 3px solid $white;
    border-left: 3px solid $white;

    transition: .7s ease;
  }

  &::before{
    content: '';
    position: absolute;
    display: block;
    bottom: -2px;
    right: -2px;

    border-radius: 3px;
    opacity: 0;

    width: 20%;
    height: 70%;
    z-index: -1;

    border-bottom: 3px solid $white;
    border-right: 3px solid $white;

    transition: .7s ease;
  }

  &:hover{
    box-shadow: 0px 14px 85px rgba(240, 42, 47, 0.06), 
    0px 5.11023px 31.0264px rgba(240, 42, 47, 0.0413989), 
    0px 2.48092px 15.0627px rgba(240, 42, 47, 0.0333774), 
    0px 1.21619px 7.38404px rgba(240, 42, 47, 0.0266226), 
    0px 0.480885px 2.91966px rgba(240, 42, 47, 0.0186011);

    transform: scale(1.05) skewX(-10deg);

    &::after{
      opacity: 1;
      top: -2px;
      left: -2px;
    }
    &::before{
      opacity: 1;
      bottom: -2px;
      right: -2px;
    }
  }
}

.btn-secondary {
  display: inline-block;

  padding: 10px 32px;
  border-radius: 3px;

  transform: skewX(-10deg);
  transition: .7s ease;

  text-transform: uppercase;
  background: transparent;

  position: relative;

  border: 2px solid $red;

  @include responsive(s){
    display: none;
  }

  &::after {
    content: '';
    display: block;
    position: absolute;
    top: -1px;
    left: -1px;

    z-index: -1;

    width: 0%;
    height: 103%;
    transition: .7s ease;

    background: linear-gradient(225deg, #EA1D22 0%, #B31317 100%);
  }

  &:hover {
    &::after {
      width: 102%;
    }
  }
}

.bg-video {
  // o bg video é filho direto do body e o body e position relative por isso
  // coloquei position absolute para o bg-video não atrapalhar os outros
  // elementos
  position: absolute;
  top: 0;
  left: 0;

  z-index: -1;
  overflow: hidden;

  width: 100%;
  height: 100%;

  display: flex;
  // alinhar verticalmente
  justify-content: center;
  // alinhar horizontalmente
  align-items: center;

  &::after {
    content: '';
    width: 100%;
    height: 100%;

    position: absolute;
    top: 0;
    left: 0;
    display: block;

    background: linear-gradient(101.47deg, #0A0C10 26.38%, rgba(10, 12, 16, 0.8) 50.07%, #0A0C10 73.17%);
  }
}

.bg-loader {
  width: 100%;
  height: 100vh;
  position: absolute;
  top: 0;
  left: 0;

  z-index: 999;

  display: flex;
  // verticalmente
  justify-content: center;
  // horizontalmente
  align-items: center;

  // overflow: hidden;

  background: linear-gradient(225deg, red 0%, $red-dark 100%);
}
